<persistence xmlns="http://java.sun.com/xml/ns/persistence"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
	version="2.0">

	<persistence-unit name="persist-unit"
		transaction-type="RESOURCE_LOCAL">
		<provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>

		<!-- All persistence classes must be listed -->
		<class>purchasetracker.domain.Purchaser</class>
		<class>purchasetracker.domain.Company</class>
		<class>purchasetracker.domain.Product</class>
		
		<properties>

			<!-- Provider-specific connection properties -->
			
			<!-- recreate the database each time the application is started -->
			<property name="javax.persistence.jdbc.url" value="jdbc:derby:target/derbydb2;create=true" />
			
			<property name="javax.persistence.jdbc.driver" value="org.apache.derby.jdbc.EmbeddedDriver" />
			<property name="javax.persistence.jdbc.user" value="" />
			<property name="javax.persistence.jdbc.password" value="" />


                        <!-- create ddl on demand. A side affect of this is the first call to the dao layer will take a while -->
			<property name="eclipselink.ddl-generation" value="drop-and-create-tables" />
			<property name="eclipselink.create-ddl-jdbc-file-name"
				value="createDDL_ddlGeneration.jdbc" />

                        <!-- what did eclipse link create -->
			<property name="eclipselink.drop-ddl-jdbc-file-name" value="dropDDL_ddlGeneration.jdbc" />
			<property name="eclipselink.ddl-generation.output-mode"
				value="both" />

			<property name="eclipseink.logging.level" value="FINE" />
		</properties>

	</persistence-unit>

</persistence>
